import streamlit as st
import pandas as pd
import unicodedata

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Calculadora Solar Inteligente", page_icon="‚ö°", layout="wide")

# CSS para estilo
st.markdown("""
<style>
    .main { background-color: #f7f9fb; }
    .block-container { padding-top: 1.5rem; padding-bottom: 2rem; }
    .css-18e3th9 { padding-top: 1rem; }
    .css-1d391kg { padding-top: 0rem; }
</style>
""", unsafe_allow_html=True)

# Fun√ß√µes utilit√°rias
def padronizar_colunas(df):
    df.columns = (
        df.columns
          .str.strip()
          .str.lower()
          .str.normalize('NFKD')
          .str.encode('ascii', errors='ignore')
          .str.decode('utf-8')
    )
    return df

def extrair_intervalo(campo):
    if pd.isna(campo) or campo == "-" or campo == "":
        return 0.0, float('inf')
    partes = campo.replace(" ", "").split("-")
    return float(partes[0]), float(partes[1])

# Mapeamento liga√ß√£o ‚Üí categorias poss√≠veis
mapa_ligacao = {
    "Monof√°sico": ["M0", "M1", "M2", "M3"],
    "Bif√°sico": ["B0", "B1"],
    "Trif√°sico": ["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "T10", "T11", "T12"]
}

# T√≠tulo principal
st.title("‚ö° Calculadora de Projeto Solar ‚Äî VSS Energia")

# Carregamento dos dados
df_tensao = padronizar_colunas(pd.read_csv("municipios_tensao.csv"))
df_disjuntor = padronizar_colunas(pd.read_csv("tabela_disjuntores.csv"))
df_potencia = padronizar_colunas(pd.read_csv("tabela_potencia_maxima.csv"))

# Sidebar e logo
st.sidebar.image("imagens/logo.png", width=200)
st.sidebar.header("Par√¢metros do Projeto")

cidade = st.sidebar.selectbox("Selecione a cidade:", sorted(df_tensao["municipio"].unique()))
tensao = df_tensao.loc[df_tensao["municipio"] == cidade, "tensao"].values[0]
st.sidebar.write(f"**Tens√£o dispon√≠vel:** {tensao}")

carga = st.sidebar.number_input("Informe a carga instalada (kW):", min_value=0.0, step=0.1)
ligacao = st.sidebar.radio("Tipo de liga√ß√£o:", ["Monof√°sico", "Bif√°sico", "Trif√°sico"])

# Valida√ß√£o de liga√ß√£o para inversor
if "220/127" in tensao and ligacao == "Monof√°sico":
    st.sidebar.warning("‚ö†Ô∏è Para projeto solar em 220/127‚ÄØV, a liga√ß√£o deve ser pelo menos Bif√°sica ou Trif√°sica.")

# Filtrar faixa e disjuntor adequados
df_disjuntor[["carga_min", "carga_max"]] = df_disjuntor["carga instalada (kw)"].map(extrair_intervalo).apply(pd.Series)
categorias = mapa_ligacao[ligacao]

df_filtro = df_disjuntor[
    (df_disjuntor["tensao"] == tensao) &
    (df_disjuntor["categoria"].isin(categorias)) &
    (df_disjuntor["carga_min"] <= carga) &
    (df_disjuntor["carga_max"] >= carga)
]

if not df_filtro.empty:
    faixa = df_filtro.iloc[0]["categoria"]
    disjuntor = int(df_filtro.iloc[0]["disjuntor(a)"])
else:
    faixa = None
    disjuntor = None

# Consultar pot√™ncia m√°xima
pot_row = df_potencia[
    (df_potencia["tensao"] == tensao) &
    (df_potencia["categoria"] == faixa)
]

potencia_max = pot_row.iloc[0]["pot√™ncia  maxima de gera√ß√£o"] if not pot_row.empty else None

# Exibi√ß√£o
col1, col2, col3 = st.columns(3)
col1.metric("üìç Cidade", cidade)
col2.metric("üîå Tens√£o dispon√≠vel", tensao)
col3.metric("üîß Liga√ß√£o escolhida", ligacao)

st.divider()

st.subheader("üìù Resultados da An√°lise")
st.write(f"- **Carga instalada**: {carga:.2f}‚ÄØkW")
if faixa:
    st.write(f"- **Faixa identificada**: {faixa}")
else:
    st.write("- **Faixa identificada**: ‚ùå N√£o encontrada")

if disjuntor:
    st.write(f"- **Disjuntor m√≠nimo recomendado**: {disjuntor}‚ÄØA")
else:
    st.write("- **Disjuntor m√≠nimo recomendado**: N/A")

# Valida√ß√£o final e mensagem
if "220/127" in tensao and ligacao == "Monof√°sico":
    st.error("‚ö†Ô∏è Em tens√£o 220/127‚ÄØV, inversor exige liga√ß√£o Bif√°sica ou Trif√°sica ‚Äî ajuste necess√°rio.")
elif faixa is None:
    st.error("‚ùå N√£o foi poss√≠vel determinar a faixa adequada para os par√¢metros informados.")
else:
    st.success("‚úÖ Tudo ok para continuar o projeto de energia solar.")

# Pot√™ncia permitida
if potencia_max:
    st.subheader("üîÜ Pot√™ncia m√°xima permitida para gera√ß√£o solar")
    st.success(f"{potencia_max}")
else:
    st.subheader("üîÜ Pot√™ncia m√°xima permitida para gera√ß√£o solar")
    st.error("Dados n√£o dispon√≠veis para essa combina√ß√£o.")

st.caption("Desenvolvido por Vit√≥ria ‚ö° | VSS Energia Inteligente")



